import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * –ó–∞–≥–∞–ª—å–Ω–∏–π –∫–ª–∞—Å BasicDataOperation –∫–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É —Ä—ñ–∑–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö.
 * 
 * <p>–¶–µ–π –∫–ª–∞—Å —Å–ª—É–∂–∏—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—é —Ç–æ—á–∫–æ—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏
 * –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ Java: List, Queue —Ç–∞ Set. –í—ñ–Ω –æ–±'—î–¥–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö
 * —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö LocalDate.</p>
 * 
 * <p>–û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</p>
 * <ul>
 *   <li>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–µ–∫—Ü—ñ–π</li>  
 *   <li>–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö</li>
 *   <li>–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–±—Ä–æ–±–∫–æ—é –¥–∞–Ω–∏—Ö</li>
 *   <li>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤–∞–≥ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–ª–µ–∫—Ü—ñ–π</li>
 * </ul>
 * 
 * <p>–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</p>
 * <pre>
 * {@code
 * java BasicDataOperation "2024-03-16" list
 * java BasicDataOperation "2024-03-16" queue  
 * java BasicDataOperation "2024-03-16" set
 * java BasicDataOperation "2024-03-16" all
 * }
 * </pre>
 */
public class BasicDataOperation {
    static final String PATH_TO_DATA_FILE = "list/LocalDate.data.sorted";

    LocalDate dateTimeValueToSearch;
    LocalDate[] dateTimeArray;

    private static final String SEPARATOR = "\n" + "=".repeat(80) + "\n";
    private static final String USAGE_MESSAGE = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: java BasicDataOperation <–ø–æ—à—É–∫–æ–≤–µ-–∑–Ω–∞—á–µ–Ω–Ω—è> \n" +
"–ü—Ä–∏–∫–ª–∞–¥:\n" +
"  java BasicDataOperation \"2025-01-02\"         // –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD";

    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(USAGE_MESSAGE);
            return;
        }

        String searchValue = args[0];

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞—Ç–∏
        try {
            // –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å 'T' (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏), –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π
            if (searchValue.contains("T")) {
                searchValue = searchValue.split("T")[0];
            }
            LocalDate.parse(searchValue, DateTimeFormatter.ISO_DATE);
        } catch (Exception e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2024-03-16)");
            return;
        }

        BasicDataOperation coordinator = new BasicDataOperation();
        coordinator.executeOperations(args);
    }

    /**
     * –ö–æ–æ—Ä–¥–∏–Ω—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∏–ø—É.
     * 
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     */
    private void executeOperations(String[] args) {
        System.out.println(SEPARATOR);
            System.out.println("üöÄ –†–û–ó–ü–û–ß–ê–¢–û –ê–ù–ê–õ–Ü–ó –î–ê–ù–ò–• LocalDate üöÄ");
        System.out.println("–ü–æ—à—É–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: " + args[0]);
        System.out.println("–§–∞–π–ª –¥–∞–Ω–∏—Ö: " + PATH_TO_DATA_FILE);
        System.out.println(SEPARATOR);
        
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
            dateTimeValueToSearch = LocalDate.parse(args[0], DateTimeFormatter.ISO_DATE);
        dateTimeArray = DataFileHandler.loadArrayFromFile(PATH_TO_DATA_FILE);
        
        runAllOperations();

        System.out.println(SEPARATOR);
        System.out.println("‚úÖ –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û ‚úÖ");
        System.out.println(SEPARATOR);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é List.
     * 
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–æ –∫–ª–∞—Å—É
     */
    private void runListOperations() {
        System.out.println("üìã –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø–ú LIST");
        System.out.println("–†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: " + dateTimeArray.length + " –∑–∞–ø–∏—Å—ñ–≤");
        System.out.println("-".repeat(50));
        
        try {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É –∑ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
            BasicDataOperationUsingList listProcessor = new BasicDataOperationUsingList(dateTimeValueToSearch, dateTimeArray);
            listProcessor.executeDataOperations();
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ List: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é Queue.
     * 
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–æ –∫–ª–∞—Å—É
     */
    private void runQueueOperations() {
        System.out.println("üîÑ –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø–ú QUEUE");
        System.out.println("–†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: " + dateTimeArray.length + " –∑–∞–ø–∏—Å—ñ–≤");
        System.out.println("-".repeat(50));
        
        try {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É –∑ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
            BasicDataOperationUsingQueue queueProcessor = new BasicDataOperationUsingQueue(dateTimeValueToSearch, dateTimeArray);
            queueProcessor.runDataProcessing();
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Queue: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é Set.
     * 
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–æ –∫–ª–∞—Å—É
     */
    private void runSetOperations() {
        System.out.println("üîç –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø–ú SET");
        System.out.println("–†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: " + dateTimeArray.length + " –∑–∞–ø–∏—Å—ñ–≤");
        System.out.println("-".repeat(50));
        
        try {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É –∑ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö           
            BasicDataOperationUsingSet setProcessor = new BasicDataOperationUsingSet(dateTimeValueToSearch, dateTimeArray);
            setProcessor.executeDataAnalysis();
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Set: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ —É—Å—ñ–º–∞ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–µ–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
     * 
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–æ –∫–ª–∞—Å—ñ–≤
     */
    private void runAllOperations() {
        System.out.println("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó –í–°–Ü–• –°–¢–†–£–ö–¢–£–† –î–ê–ù–ò–•");
        System.out.println("=".repeat(60));
        
        // –û–±—Ä–æ–±–∫–∞ List
        runListOperations();
        System.out.println("\n" + "~".repeat(60) + "\n");
        
        // –û–±—Ä–æ–±–∫–∞ Queue  
        runQueueOperations();
        System.out.println("\n" + "~".repeat(60) + "\n");
        
        // –û–±—Ä–æ–±–∫–∞ Set
        runSetOperations();
    }
}
